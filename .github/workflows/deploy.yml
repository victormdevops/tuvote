name: CI - Docker Build & Test

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Create backend .env from GitHub Secrets
        run: |
          echo "PORT=3000" > ./rotaflow-backend/.env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> ./rotaflow-backend/.env

      - name: Build Docker images
        run: docker-compose build

      - name: Start services
        run: docker-compose up -d

      - name: Wait for backend to be ready
        run: |
          for i in {1..20}; do
            if curl -s http://localhost:3000/api/health > /dev/null; then
              echo "✅ Backend is up!"
              exit 0
            fi
            echo "⏳ Waiting for backend... ($i/20)"
            sleep 3
          done
          echo "❌ Backend failed to start in time"
          docker-compose logs backend
          exit 1

      - name: Wait for frontend to be ready
        run: |
          for i in {1..20}; do
            if curl -s http://localhost:8080 > /dev/null; then
              echo "✅ Frontend is up!"
              exit 0
            fi
            echo "⏳ Waiting for frontend... ($i/20)"
            sleep 3
          done
          echo "❌ Frontend failed to start in time"
          docker-compose logs frontend
          exit 1

      - name: Stop services
        run: docker-compose down

      # --- Monitoring & Debugging helpers ---
      - name: Dump container health + compose ps (always)
        if: always()
        run: |
          docker compose ps
          docker inspect $(docker ps -q) --format '{{.Name}} {{json .State.Health}}' || true

      - name: Collect logs (on failure)
        if: failure()
        run: |
          docker compose logs --no-color > compose-logs.txt || true

      - name: Upload logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: compose-logs.txt

        # ---- Deployment to VPS (optional, enable when ready) ----
      # - name: Deploy to VPS
      #   env:
      #     SSH_KEY: ${{ secrets.SSH_KEY }}
      #   run: |
      #     echo "$SSH_KEY" > private_key.pem
      #     chmod 600 private_key.pem
      #     ssh -o StrictHostKeyChecking=no -i private_key.pem user@your-vps-ip "
      #       cd /path/to/app &&
      #       git pull &&
      #       docker-compose down &&
      #       docker-compose up -d --build
      #     "
